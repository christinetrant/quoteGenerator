{"version":3,"sources":["components/Quote.js","components/Button.js","containers/App.js","serviceWorker.js","index.js"],"names":["Quote","singleQuote","length","className","class","text","author","getSingleQuote","onClick","App","getAllQuotes","fetch","then","response","json","data","console","log","setState","Math","floor","random","allQuotes","state","this","isConnected","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"mTAkCeA,G,MA/BD,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACf,OAAIA,EAAYC,OAEZ,yBAAKC,UAAU,UACb,yBAAKC,MAAM,cACT,8BACA,gCAOJ,yBAAKD,UAAU,UACb,oCACE,2BAAoB,OAAhBF,GAAwBA,EAAYI,MAGvB,OAAhBJ,GAA+C,OAAvBA,EAAYK,OACnC,mCAASL,EAAYK,QAGrB,2CAEF,yBAAKH,UAAU,gBCdVH,G,MAVD,SAAC,GAAwB,IAAtBO,EAAqB,EAArBA,eACf,OACE,yBAAKJ,UAAU,UACb,4BAAQA,UAAU,gBAAgBK,QAASD,GAA3C,mBC8CSE,G,wDA9Cb,aAAe,IAAD,8BACZ,gBAYFC,aAAe,WAEbC,MADY,+BAETC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAKL,OAJAC,QAAQC,IAAIF,EAAK,GAAGV,MACpB,EAAKa,SAAS,CACZjB,YAAac,EAAKI,KAAKC,MAAMD,KAAKE,SAAWN,EAAKb,WAE7C,EAAKgB,SAAS,CAAEI,UAAWP,QAtB1B,EA2BdR,eAAiB,WAAO,IACde,EAAc,EAAKC,MAAnBD,UACFrB,EAAcqB,EAAUH,KAAKC,MAAMD,KAAKE,SAAWC,EAAUpB,SAEnE,EAAKgB,SAAS,CAAEjB,iBA7BhB,EAAKsB,MAAQ,CACXD,UAAW,KACXrB,YAAa,IAJH,E,gEAUZuB,KAAKd,iB,+BAwBL,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,CACET,YAAauB,KAAKD,MAAMtB,YACxBwB,YAAaD,KAAKD,MAAME,cAE1B,kBAAC,EAAD,CAAQlB,eAAgBiB,KAAKjB,sB,GAzCnBmB,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.39a5d703.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Quote.css\";\r\n\r\nconst Quote = ({ singleQuote }) => {\r\n  if (singleQuote.length) {\r\n    return (\r\n      <div className=\"center\">\r\n        <div class=\"lds-ripple\">\r\n          <div></div>\r\n          <div></div>\r\n        </div>\r\n        {/* <div className=\"slanted\"></div> */}\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className=\"center\">\r\n        <blockquote>\r\n          <p>{singleQuote !== null && singleQuote.text}</p>\r\n\r\n          {/* If author is null want to hide cite:before */}\r\n          {singleQuote !== null && singleQuote.author !== null ? (\r\n            <cite>- {singleQuote.author}</cite>\r\n          ) : (\r\n            // <cite className=\"hidden\">no</cite>\r\n            <cite>- unknown</cite>\r\n          )}\r\n          <div className=\"slanted\"></div>\r\n        </blockquote>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Quote;\r\n","import React from \"react\";\r\nimport \"./Button.css\";\r\n\r\nconst Quote = ({ getSingleQuote }) => {\r\n  return (\r\n    <div className=\"center\">\r\n      <button className=\"glow-on-hover\" onClick={getSingleQuote}>\r\n        Random Quote\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Quote;\r\n","import React, { Component, Fragment } from \"react\";\nimport Quote from \"../components/Quote\";\nimport Button from \"../components/Button\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      allQuotes: null,\n      singleQuote: \"\",\n      // isConnected: false,\n    };\n  }\n\n  componentDidMount() {\n    this.getAllQuotes();\n  }\n\n  getAllQuotes = () => {\n    const API = \"https://type.fit/api/quotes\";\n    fetch(API)\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(data[0].text);\n        this.setState({\n          singleQuote: data[Math.floor(Math.random() * data.length)],\n        });\n        return this.setState({ allQuotes: data });\n        // console.log(\"state\", this.state.allQuotes[0].text);\n      });\n  };\n\n  getSingleQuote = () => {\n    const { allQuotes } = this.state;\n    const singleQuote = allQuotes[Math.floor(Math.random() * allQuotes.length)];\n    // console.log(singleQuote);\n    this.setState({ singleQuote });\n  };\n  render() {\n    return (\n      <Fragment>\n        <Quote\n          singleQuote={this.state.singleQuote}\n          isConnected={this.state.isConnected}\n        />\n        <Button getSingleQuote={this.getSingleQuote} />\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}